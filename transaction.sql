CREATE TABLE public.accounts (
    id          INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    email       VARCHAR(255) NOT NULL UNIQUE,
    password    VARCHAR(255) NOT NULL,
    pin         VARCHAR(155) NULL,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE public.profiles (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fullname    VARCHAR(255),
    phone       VARCHAR(255),
    img         VARCHAR(255),
    verified    BOOLEAN DEFAULT FALSE,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_profiles_account FOREIGN KEY (id) REFERENCES accounts(id)
);

CREATE TABLE public.wallets (
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    balance     INTEGER DEFAULT 0,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_wallets_account FOREIGN KEY (id) REFERENCES accounts(id)
);

CREATE TABLE public.internal_accounts (
    id          INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name        VARCHAR(255),
    img         VARCHAR(255),
    tax         INTEGER DEFAULT 0,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE public.participants (
    id          INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    type        VARCHAR(20) NOT NULL CHECK (type IN ('wallet', 'internal')),
    ref_id      INTEGER NOT NULL,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(type, ref_id) -- supaya 1 wallet/internal tidak duplikat
);

CREATE TYPE type_transaction AS ENUM ('transfer', 'top_up');

CREATE TABLE public.transactions (
    id                  INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    type                type_transaction NOT NULL,
    amount              INTEGER NOT NULL,
    total               INTEGER NOT NULL,
    note                TEXT,
    id_sender           INTEGER NOT NULL,
    id_receiver         INTEGER NOT NULL,
    created_at          TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_sender      TIMESTAMP,
    deleted_receiver    TIMESTAMP,
    CONSTRAINT fk_tx_sender FOREIGN KEY (id_sender) REFERENCES participants(id),
    CONSTRAINT fk_tx_receiver FOREIGN KEY (id_receiver) REFERENCES participants(id)
);

